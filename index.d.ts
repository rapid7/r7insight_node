/** Declaration file generated by dts-gen */

export = r7insight_node;

declare class r7insight_node {
    constructor(...args: any[]);

    closeConnection(...args: any[]): void;

    log(...args: any[]): void;

    setDefaultEncoding(...args: any[]): void;

    toLevel(...args: any[]): void;

    static bufferDrainEvent: string;

    static bunyanStream(opts: any): any;

    static captureRejectionSymbol: any;

    static captureRejections: boolean;

    static connectedEvent: string;

    static defaultMaxListeners: number;

    static disconnectedEvent: string;

    static drainWritableEvent: string;

    static errorEvent: string;

    static errorMonitor: any;

    static finishWritableEvent: string;

    static finished(stream: any, options: any, callback: any, ...args: any[]): any;

    static init(opts: any): void;

    static listenerCount(emitter: any, type: any): any;

    static logEvent: string;

    static on(emitter: any, event: any): any;

    static once(emitter: any, name: any): any;

    static pipeWritableEvent: string;

    static pipeline(streams: any): any;

    static provisionWinston(winston: any, Transport: any): void;

    static timeoutEvent: string;

    static unpipeWritableEvent: string;

    static usingDomains: boolean;

}

declare namespace r7insight_node {
    class Duplex {
        constructor(options: any);

        cork(): void;

        end(chunk: any, encoding: any, cb: any): any;

        setDefaultEncoding(encoding: any): any;

        uncork(): void;

        write(chunk: any, encoding: any, cb: any): any;

        static Duplex: any;

        static ReadableState(options: any, stream: any, isDuplex: any): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static from(iterable: any, opts: any): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class EventEmitter {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class PassThrough {
        constructor(options: any);

        static PassThrough: any;

        static ReadableState(options: any, stream: any, isDuplex: any): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static from(iterable: any, opts: any): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class Readable {
        constructor(options: any);

        addListener(ev: any, fn: any): any;

        destroy(err: any, cb: any): any;

        isPaused(): any;

        off(ev: any, fn: any): any;

        on(ev: any, fn: any): any;

        pause(): any;

        pipe(dest: any, pipeOpts: any): any;

        push(chunk: any, encoding: any): any;

        read(n: any): any;

        removeAllListeners(ev: any, ...args: any[]): any;

        removeListener(ev: any, fn: any): any;

        resume(): any;

        setEncoding(enc: any): any;

        unpipe(dest: any): any;

        unshift(chunk: any, encoding: any): any;

        wrap(stream: any, ...args: any[]): any;

        static Readable: any;

        static ReadableState(options: any, stream: any, isDuplex: any): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static from(iterable: any, opts: any): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class Stream {
        constructor(opts: any);

        pipe(dest: any, options: any): any;

        static Stream: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class Transform {
        constructor(options: any);

        push(chunk: any, encoding: any): any;

        static ReadableState(options: any, stream: any, isDuplex: any): void;

        static Transform: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static from(iterable: any, opts: any): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class Writable {
        constructor(options: any);

        cork(): void;

        destroy(err: any, cb: any): any;

        end(chunk: any, encoding: any, cb: any): any;

        pipe(): void;

        setDefaultEncoding(encoding: any): any;

        uncork(): void;

        write(chunk: any, encoding: any, cb: any): any;

        static Writable: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static finished(stream: any, options: any, callback: any, ...args: any[]): any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static pipeline(streams: any): any;

        static usingDomains: boolean;

    }

    class WritableState {
        constructor(options: any, stream: any, isDuplex: any);

        getBuffer(): any;

    }

    namespace Duplex {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class PassThrough {
            constructor(options: any);

            static Duplex: any;

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Readable {
            constructor(options: any);

            addListener(ev: any, fn: any): any;

            destroy(err: any, cb: any): any;

            isPaused(): any;

            off(ev: any, fn: any): any;

            on(ev: any, fn: any): any;

            pause(): any;

            pipe(dest: any, pipeOpts: any): any;

            push(chunk: any, encoding: any): any;

            read(n: any): any;

            removeAllListeners(ev: any, ...args: any[]): any;

            removeListener(ev: any, fn: any): any;

            resume(): any;

            setEncoding(enc: any): any;

            unpipe(dest: any): any;

            unshift(chunk: any, encoding: any): any;

            wrap(stream: any, ...args: any[]): any;

            static Duplex: any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Stream {
            constructor(opts: any);

            pipe(dest: any, options: any): any;

            static Duplex: any;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Transform {
            constructor(options: any);

            push(chunk: any, encoding: any): any;

            static Duplex: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Writable {
            constructor(options: any);

            cork(): void;

            destroy(err: any, cb: any): any;

            end(chunk: any, encoding: any, cb: any): any;

            pipe(): void;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        namespace PassThrough {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Readable {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Readable: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Stream {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Transform {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Writable {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class WritableState {
                constructor(options: any, stream: any, isDuplex: any);

                getBuffer(): any;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace PassThrough {
        class Duplex {
            constructor(options: any);

            cork(): void;

            end(chunk: any, encoding: any, cb: any): any;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class Readable {
            constructor(options: any);

            addListener(ev: any, fn: any): any;

            destroy(err: any, cb: any): any;

            isPaused(): any;

            off(ev: any, fn: any): any;

            on(ev: any, fn: any): any;

            pause(): any;

            pipe(dest: any, pipeOpts: any): any;

            push(chunk: any, encoding: any): any;

            read(n: any): any;

            removeAllListeners(ev: any, ...args: any[]): any;

            removeListener(ev: any, fn: any): any;

            resume(): any;

            setEncoding(enc: any): any;

            unpipe(dest: any): any;

            unshift(chunk: any, encoding: any): any;

            wrap(stream: any, ...args: any[]): any;

            static PassThrough: any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Stream {
            constructor(opts: any);

            pipe(dest: any, options: any): any;

            static PassThrough: any;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Transform {
            constructor(options: any);

            push(chunk: any, encoding: any): any;

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Writable {
            constructor(options: any);

            cork(): void;

            destroy(err: any, cb: any): any;

            end(chunk: any, encoding: any, cb: any): any;

            pipe(): void;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static PassThrough: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        namespace Duplex {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Readable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Readable: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Readable: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Stream {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Transform {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Writable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class WritableState {
                constructor(options: any, stream: any, isDuplex: any);

                getBuffer(): any;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace Readable {
        class Duplex {
            constructor(options: any);

            cork(): void;

            end(chunk: any, encoding: any, cb: any): any;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class PassThrough {
            constructor(options: any);

            static PassThrough: any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Stream {
            constructor(opts: any);

            pipe(dest: any, options: any): any;

            static Readable: any;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Transform {
            constructor(options: any);

            push(chunk: any, encoding: any): any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Writable {
            constructor(options: any);

            cork(): void;

            destroy(err: any, cb: any): any;

            end(chunk: any, encoding: any, cb: any): any;

            pipe(): void;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Readable: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        namespace Duplex {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Readable: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace PassThrough {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Readable: any;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Readable: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Stream {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Readable: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Transform {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Readable: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Readable: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Writable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Readable: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class WritableState {
                constructor(options: any, stream: any, isDuplex: any);

                getBuffer(): any;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace Stream {
        class Duplex {
            constructor(options: any);

            cork(): void;

            end(chunk: any, encoding: any, cb: any): any;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class PassThrough {
            constructor(options: any);

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Readable {
            constructor(options: any);

            addListener(ev: any, fn: any): any;

            destroy(err: any, cb: any): any;

            isPaused(): any;

            off(ev: any, fn: any): any;

            on(ev: any, fn: any): any;

            pause(): any;

            pipe(dest: any, pipeOpts: any): any;

            push(chunk: any, encoding: any): any;

            read(n: any): any;

            removeAllListeners(ev: any, ...args: any[]): any;

            removeListener(ev: any, fn: any): any;

            resume(): any;

            setEncoding(enc: any): any;

            unpipe(dest: any): any;

            unshift(chunk: any, encoding: any): any;

            wrap(stream: any, ...args: any[]): any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Stream: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Transform {
            constructor(options: any);

            push(chunk: any, encoding: any): any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Stream: any;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Writable {
            constructor(options: any);

            cork(): void;

            destroy(err: any, cb: any): any;

            end(chunk: any, encoding: any, cb: any): any;

            pipe(): void;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Stream: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        namespace Duplex {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace PassThrough {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Readable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Readable: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Transform {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Writable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class WritableState {
                constructor(options: any, stream: any, isDuplex: any);

                getBuffer(): any;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace Transform {
        class Duplex {
            constructor(options: any);

            cork(): void;

            end(chunk: any, encoding: any, cb: any): any;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class PassThrough {
            constructor(options: any);

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Readable {
            constructor(options: any);

            addListener(ev: any, fn: any): any;

            destroy(err: any, cb: any): any;

            isPaused(): any;

            off(ev: any, fn: any): any;

            on(ev: any, fn: any): any;

            pause(): any;

            pipe(dest: any, pipeOpts: any): any;

            push(chunk: any, encoding: any): any;

            read(n: any): any;

            removeAllListeners(ev: any, ...args: any[]): any;

            removeListener(ev: any, fn: any): any;

            resume(): any;

            setEncoding(enc: any): any;

            unpipe(dest: any): any;

            unshift(chunk: any, encoding: any): any;

            wrap(stream: any, ...args: any[]): any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Stream {
            constructor(opts: any);

            pipe(dest: any, options: any): any;

            static Stream: any;

            static Transform: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Writable {
            constructor(options: any);

            cork(): void;

            destroy(err: any, cb: any): any;

            end(chunk: any, encoding: any, cb: any): any;

            pipe(): void;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Transform: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        namespace Duplex {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace PassThrough {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static PassThrough: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Readable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Readable: any;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Readable: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Stream {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Writable {
                constructor(options: any);

                cork(): void;

                destroy(err: any, cb: any): any;

                end(chunk: any, encoding: any, cb: any): any;

                pipe(): void;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Writable {
                    constructor(options: any);

                    cork(): void;

                    destroy(err: any, cb: any): any;

                    end(chunk: any, encoding: any, cb: any): any;

                    pipe(): void;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static WritableState: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Writable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class WritableState {
                    constructor(options: any, stream: any, isDuplex: any);

                    getBuffer(): any;

                }

            }

        }

        namespace Writable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class WritableState {
                constructor(options: any, stream: any, isDuplex: any);

                getBuffer(): any;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace Writable {
        class Duplex {
            constructor(options: any);

            cork(): void;

            end(chunk: any, encoding: any, cb: any): any;

            setDefaultEncoding(encoding: any): any;

            uncork(): void;

            write(chunk: any, encoding: any, cb: any): any;

            static Duplex: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        class PassThrough {
            constructor(options: any);

            static PassThrough: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Readable {
            constructor(options: any);

            addListener(ev: any, fn: any): any;

            destroy(err: any, cb: any): any;

            isPaused(): any;

            off(ev: any, fn: any): any;

            on(ev: any, fn: any): any;

            pause(): any;

            pipe(dest: any, pipeOpts: any): any;

            push(chunk: any, encoding: any): any;

            read(n: any): any;

            removeAllListeners(ev: any, ...args: any[]): any;

            removeListener(ev: any, fn: any): any;

            resume(): any;

            setEncoding(enc: any): any;

            unpipe(dest: any): any;

            unshift(chunk: any, encoding: any): any;

            wrap(stream: any, ...args: any[]): any;

            static Readable: any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Stream {
            constructor(opts: any);

            pipe(dest: any, options: any): any;

            static Stream: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class Transform {
            constructor(options: any);

            push(chunk: any, encoding: any): any;

            static ReadableState(options: any, stream: any, isDuplex: any): void;

            static Transform: any;

            static Writable: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static finished(stream: any, options: any, callback: any, ...args: any[]): any;

            static from(iterable: any, opts: any): any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static pipeline(streams: any): any;

            static usingDomains: boolean;

        }

        class WritableState {
            constructor(options: any, stream: any, isDuplex: any);

            getBuffer(): any;

        }

        namespace Duplex {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Duplex: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace PassThrough {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

        namespace PassThrough {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static PassThrough: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Readable {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Readable: any;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Stream {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Transform {
                constructor(options: any);

                push(chunk: any, encoding: any): any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Transform {
                    constructor(options: any);

                    push(chunk: any, encoding: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Transform {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Transform {
            class Duplex {
                constructor(options: any);

                cork(): void;

                end(chunk: any, encoding: any, cb: any): any;

                setDefaultEncoding(encoding: any): any;

                uncork(): void;

                write(chunk: any, encoding: any, cb: any): any;

                static Duplex: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static usingDomains: boolean;

            }

            class PassThrough {
                constructor(options: any);

                static PassThrough: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Readable {
                constructor(options: any);

                addListener(ev: any, fn: any): any;

                destroy(err: any, cb: any): any;

                isPaused(): any;

                off(ev: any, fn: any): any;

                on(ev: any, fn: any): any;

                pause(): any;

                pipe(dest: any, pipeOpts: any): any;

                push(chunk: any, encoding: any): any;

                read(n: any): any;

                removeAllListeners(ev: any, ...args: any[]): any;

                removeListener(ev: any, fn: any): any;

                resume(): any;

                setEncoding(enc: any): any;

                unpipe(dest: any): any;

                unshift(chunk: any, encoding: any): any;

                wrap(stream: any, ...args: any[]): any;

                static Readable: any;

                static ReadableState(options: any, stream: any, isDuplex: any): void;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static from(iterable: any, opts: any): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            class Stream {
                constructor(opts: any);

                pipe(dest: any, options: any): any;

                static Stream: any;

                static Transform: any;

                static Writable: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static finished(stream: any, options: any, callback: any, ...args: any[]): any;

                static init(opts: any): void;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any): any;

                static once(emitter: any, name: any): any;

                static pipeline(streams: any): any;

                static usingDomains: boolean;

            }

            namespace Duplex {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace PassThrough {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Readable {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Stream {
                    constructor(opts: any);

                    pipe(dest: any, options: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

            namespace Stream {
                class Duplex {
                    constructor(options: any);

                    cork(): void;

                    end(chunk: any, encoding: any, cb: any): any;

                    setDefaultEncoding(encoding: any): any;

                    uncork(): void;

                    write(chunk: any, encoding: any, cb: any): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static usingDomains: any;

                }

                class PassThrough {
                    constructor(options: any);

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

                class Readable {
                    constructor(options: any);

                    addListener(ev: any, fn: any): any;

                    destroy(err: any, cb: any): any;

                    isPaused(): any;

                    off(ev: any, fn: any): any;

                    on(ev: any, fn: any): any;

                    pause(): any;

                    pipe(dest: any, pipeOpts: any): any;

                    push(chunk: any, encoding: any): any;

                    read(n: any): any;

                    removeAllListeners(ev: any, ...args: any[]): any;

                    removeListener(ev: any, fn: any): any;

                    resume(): any;

                    setEncoding(enc: any): any;

                    unpipe(dest: any): any;

                    unshift(chunk: any, encoding: any): any;

                    wrap(stream: any, ...args: any[]): any;

                    static Duplex: any;

                    static EventEmitter: any;

                    static PassThrough: any;

                    static Readable: any;

                    static ReadableState: any;

                    static Stream: any;

                    static Transform: any;

                    static Writable: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static finished: any;

                    static from: any;

                    static init: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static pipeline: any;

                    static usingDomains: any;

                }

            }

        }

    }

}

